pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES') //timeout
        disableConcurrentBuilds()  //disable concurent build one after one
        ansiColor('xterm')
    }
    parameters {
    choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'select action')
    }

    stages {
      stage('Init and Plan') {
        steps {
        withAWS(region: 'us-east-1', credentials: 'aws-creds') {
          sh '''
              cd 20-sg
              terraform init -reconfigure
              terraform plan -out=tfplan
            '''
          }
        }
      }
      stage('Apply and Destroy') {
        // input {
        //   message "Should we continue to ${params.ACTION}"
        //   ok 'Yes, we should.'
        // }
        steps {
          withAWS(region: 'us-east-1', credentials: 'aws-creds') {
            sh """
              cd 20-sg
              if [ ${params.ACTION} == 'apply' ]
              then
                terraform apply --auto-approve tfplan
              elif [ ${params.ACTION} == 'destroy' ]
              then
               terraform destroy --auto-approve
              fi
            """
          }
        }
      }
      stage('Destroy vpc') {
        when {
        expression { params.ACTION == 'destroy' }
        }
        steps {
          build job: '10-vpc', parameters: [string(name: 'ACTION', value: 'destroy')], wait: false
        }
      }
      // Run this stage only if ACTION parameter is set to 'apply'
      stage('Run Parallel-1 Jobs') {
        when {
           expression { params.ACTION == 'apply' }
        }
        steps {
          script {
           // Define a map of display names to actual Jenkins job names
           // Key = stage name shown in Jenkins UI
           // Value = actual job to trigger
           def jobs = [
             "Bastion" : "30-bastion",
             "EKS"     : "50-eks",
             "ACM"     : "60-acm", 
             "ECR"     : "70-ecr"
            ]
           // Convert the jobs map into another map where:
           // - key = stage name (e.g., Bastion, EKS)
          // - value = a closure (code block) that triggers the build
           def parallelStages = jobs.collectEntries { stageName, jobName ->
              ["${stageName}" : {
                // Trigger the downstream job without waiting for it to finish
                build job: jobName, parameters: [string(name: 'ACTION', value: 'apply')], 
                wait: false
              }]}
             // Execute all the defined stages in parallel
            // Jenkins runs each block under its own named stage (e.g., Bastion, EKS)

          parallel parallelStages
         }
        }
      }
      stage('Parallel-2') {
        when {
            expression { params.ACTION == 'apply' }
        }
        parallel {
          stage('ALB') {
           steps {
             build job: '80-alb', parameters: [string(name: 'ACTION', value: 'apply')], wait: false
           }
          }
          stage('CDN') {
            steps {
              build job: '90-cdn', parameters: [string(name: 'ACTION', value: 'apply')], wait: false
            }
          }
        }
      }
    }

  post {
    always {
      echo 'This section always runs!'
      deleteDir() //in jenkins this function will delete the workspace directory of the job on the agent (VM/container)
        }
        success {
      echo 'This section runs when pipeline sucess'
        }
        failure {
      echo 'This section runs when pipeline failed'
        }
   }
}
